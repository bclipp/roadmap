// This roadmap is written in DOT language

digraph backend {
    rankdir="LR";
    node [shape=box];

    backend [label="Backend", color="red", style="filled"];
    backend -> {
        node [color="orange", style="filled"];

        cs          [label="Computer Science"];
        go          [label="Golang"];
        db          [label="Databases"];
        networks    [label="Computer Network"];
        os          [label="Operating System"];
        development [label="Software Development Processes"];
    }

    // Computer Science
    subgraph cs {
        cs -> {
            node [color="yellow", style="filled"];

            cs_architecture [label="Architecture knowledge"];
            cs_code         [label="Code Standards&Code Review Process"];
            cs_algorithms   [label="Algorithms and data structures"];
            cs_systems      [label="Systems Programming"];
            cs_testing      [label="Testing processes"];
        }

        cs_algorithms -> {
            cs_algorithms_analysis   [label="Analysis"];
            cs_algorithms_structures [label="Data Structres"];
            cs_algorithms_algorithms [label="Algorithms"];
        }

        cs_algorithms_analysis -> {
            cs_algorithms_analysis_bigo [label="Big O"];
        }

        cs_algorithms_structures -> {
            cs_algorithms_structures_lists  [label="Lists"];
            cs_algorithms_structures_stacks [label="Stacks"];
            cs_algorithms_structures_queues [label="Queues"];
            cs_algorithms_structures_trees  [label="Trees"];
            cs_algorithms_structures_heaps  [label="Heaps"];
            cs_algorithms_structures_graphs [label="Graphs"];
        }

        cs_algorithms_algorithms -> {
            cs_algorithms_structures_sorting  [label="Sorting algoritms"];
            cs_algorithms_structures_research [label="Reasearch algoritms"];
        }

        cs_architecture -> {
            cs_architecture_microservices [label="Microservices"];
            cs_architecture_ddd           [label="Domain-Driven Design"];
            cs_architecture_solid         [label="SOLID"];
            cs_architecture_patterns      [label="Design Patterns"];
            cs_architecture_event         [label="Event Sourcing"];
            cs_architecture_oop           [label="Object-Oriented Programming"];
            cs_architecture_func          [label="Functional Programming"];
        }

        cs_architecture_oop -> {
            cs_architecture_oop_encapsulation [label="Encapsulation"];
            cs_architecture_oop_inheritance   [label="Inheritance"];
            cs_architecture_oop_polymorphism  [label="Polymorphism"];
        }
    }

    // Software Development Processes
    subgraph development {
        development -> {
            node [color="yellow", style="filled"];

            development_paradigms     [label="Paradigms and models"];
            development_methodologies [label="Methodologies and frameworks"];
            development_testing       [label="Testing"];
            development_trackers      [label="Bug tracking systems"];
            development_version       [label="Version Control"];
            development_deployment    [label="Deployment"];
            development_estimation    [label="Estimations"];
            development_debugging     [label="Debugging"];
            development_orchestration [label="Orchestration"];
        }
    }

    development_orchestration -> {
        development_orchestration_ansible [label="Ansible"];
        development_orchestration_puppet  [label="Puppet"];
        development_orchestration_k8s     [label="Kubernetes"];
    }

    development_debugging -> {
        development_debugging_troubleshooting [label="Troubleshooting"];
        development_debugging_logging         [label="Logging"];
        development_debugging_monitoring      [label="Monitoring"];
    }

    development_testing -> {
        development_testing_tdd [label="Test-driven development"];
        development_testing_bdd [label="Behavior-driven development"];
    }

    development_trackers -> {
        development_trackers_jira    [label="Jira"]
        development_trackers_redmine [label="Redmine"]
        development_trackers_tfs     [label="TFS"]
    }

    development_version -> {
        development_version_git [label="Git"]
    }

    development_deployment -> {
        development_deployment_ci [label="Continuous Integration"];
        development_deployment_cd [label="Continuous Delivery"];
    }

    development_paradigms -> {
        management_paradigms_agile     [label="Agile", URL="https://agilemanifesto.org"];
        management_paradigms_waterfall [label="Waterfall"];
    }

    development_methodologies -> {
        development_methodologies_scrum     [label="SCRUM"];
        development_methodologies_kanban    [label="Kanban"];
        development_methodologies_xp        [label="Extreme Programming"];
        development_methodologies_12factors [label="The Twelve-Factor App", URL="https://12factor.net"];
    }

    development_estimation -> {
        management_estimation_poker [label="Planning Poker"];
    }

    // Operating System
    subgraph os {
        os -> {
            node [color="yellow", style="filled"];

            os_virtual_memory [label="Virtual Memory"];
            os_threads        [label="Threads"];
            os_io             [label="I/O"];
            os_virtualization [label="Virtualization"]
            os_shell          [label="Command Language"]
        }

        os_virtualization -> {
            os_virtualization_level [label="OS-level Virtualisation"]
            os_virtualization_x86   [label="x86 Virtualization"]
        }

        os_virtualization_level -> {
            os_virtualization_level_docker  [label="Docker"];
            os_virtualization_level_nanobox [label="Nanobox"];
            os_virtualization_level_deis    [label="Deis"];
            os_virtualization_level_mesos   [label="Apache Mesos"];
        }

        os_virtualization_x86 -> {
            os_virtualization_x86_virtualbox [label="VirtualBox"];
            os_virtualization_x86_vmware     [label="VMware"];
        }
    }

    // Golang
    subgraph go {
        go -> {
            node [color="yellow", style="filled"];

            go_types       [label="Types"];
            go_function    [label="Functions"];
            go_concurrency [label="Concurrency"];
            go_tools       [label="Tools", URL="https://golang.org/cmd/"];
            go_testing     [label="Testing"];
            go_realtime    [label="Real-time"];
            go_app         [label="Web Application"];
            cs_architecture_oop;
        };

        go_types -> {
            go_types_text        [label="Text"];
            go_types_numbers     [label="Numbers"];
            go_types_collections [label="Collections"];
            go_types_pointer     [label="Pointer"];
            go_types_constant    [label="Constants"];
            go_types_interface   [label="Interface"];
            go_types_error       [label="Error"];
        };

        go_types_text -> {
            go_types_text_strings [label="Strings"];
            go_types_text_runes   [label="Runes"];
            go_types_text_bytes   [label="Bytes"];
        };

        go_types_numbers -> {
            go_types_numbers_int   [label="Integers"];
            go_types_numbers_uint  [label="Unsigned Integers"];
            go_types_numbers_float [label="Floating-point Numbers"];
        };

        go_types_collections -> {
            go_types_collections_array [label="Array"];
            go_types_collections_slice [label="Slice", URL="https://blog.golang.org/go-slices-usage-and-internals"];
            go_types_collections_map   [label="Map", URL="https://blog.golang.org/go-maps-in-action"];
        };

        go_function -> {
            go_function_closure   [label="Closure"];
            go_function_recursion [label="Recursion"];
            go_function_panic     [label="Panic"];
            go_function_recover   [label="Recover"];
            go_function_defer     [label="Defer"];
        }

        go_concurrency -> {
            go_concurrency_goroutine [label="Goroutines"];
            go_concurrency_channels  [label="Channels"];
            go_concurrency_select    [label="Select"];
            go_concurrency_race      [label="Race Condition"];
            go_concurrency_mutex     [label="Mutex"];
            os_threads;
        }

        go_tools -> {
            go_tool_fmt     [label="gofmt", URL="https://golang.org/cmd/gofmt/"];
            go_tool_vet     [label="vet", URL="https://golang.org/cmd/vet/"];
            go_tool_test    [label="test"];
            go_tool_doc     [label="godoc"];
            go_tool_pprof   [label="pprof", URL="https://blog.golang.org/profiling-go-programs"];
            go_tool_modules [label="Modules", URL="https://github.com/golang/go/wiki/Modules"];
        }

        go_realtime -> {
            go_realtime_gc        [label="Garbage Collector"];
            go_realtime_scheduler [label="Scheduler"];
        }

        go_app -> {
            go_app_context   [label="Context"];
            go_app_templates [label="Templates"];
            development_debugging_logging;
        }
    }

    // Databases
    subgraph db {
        db -> {
            node [color="yellow", style="filled"];

            db_sql            [label="SQL"];
            db_indexes        [label="Indexes"];
            db_transactions   [label="Transactions"];
            db_relational     [label="Relational"];
            db_nosql          [label="NOSQL", URL="https://martinfowler.com/nosql.html"];
            db_search         [label="Search Engines"];
            db_message_broker [label="Message Broker"];
        }

        db_message_broker -> {
            db_message_broker_kafka  [label="Kafka"];
            db_message_broker_rabbit [label="RabbitMQ"];
            db_message_broker_sqs    [label="Amazon Simple Queue Service"];
        }

        db_relational -> {
            db_relational_mysql   [label="MySQL"];
            db_relational_postgre [label="PostgreSQL"];
        }

        db_nosql -> {
            db_nosql_redis      [label="Redis"];
            db_nosql_mongo      [label="MongoDB"];
            db_nosql_clickhouse [label="ClickHouse"];
        }

        db_search -> {
            db_search_elasticseaerch [label="Elasticseaerch"];
            db_search_sphinx         [label="Sphinx"];
        }
    }

    // Computer network
    subgraph networks {
        networks -> {
            node [color="yellow", style="filled"];

            networks_osi       [label="OSI"];
            networks_grpc      [label="gRPC"];
            networks_restapi   [label="REST API"];
            networks_graphql   [label="GraphQL"];
            networks_soap      [label="SOAP"];
            networks_protocols [label="Protocols"];
            networks_websocket [label="Websocket"];
            networks_auth      [label="Authorization and Authentication"];
        }

        networks_protocols -> {
            networks_protocols_IP   [label="IP"];
            networks_protocols_TCP  [label="TCP"];
            networks_protocols_UDP  [label="UDP"];
            networks_protocols_HTTP [label="HTTP"];
            networks_protocols_TLS  [label="TLS"];
            networks_protocols_SSL  [label="SSL"];
        }

        networks_auth -> {
            networks_auth_authorization  [label="Authorization"];
            networks_auth_authentication [label="Authentication"];
            networks_auth_oauth          [label="OAuth"];
            networks_auth_jwt            [label="JWT"];
        }
    }
}