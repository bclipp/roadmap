// This roadmap is written in DOT language

digraph backend {
    rankdir="LR";
    node [shape=box];

    cs         [label="Computer Science"];
    go         [label="Golang"];
    db         [label="Databases"];
    networks   [label="Computer Network"];
    os         [label="Operating System"];
    management [label="IT Management"];
    processing [label="Software Development Processes"];

    // Computer Science
    subgraph cs {
        cs -> {
            cs_architecture [label="Architecture knowledge"];
            cs_code         [label="Code Standards&Code Review Process"];
            cs_algorithms   [label="Algorithms and data structures"];
            cs_systems      [label="Systems Programming"];
            cs_debugging    [label="Debugging"];
            cs_testing      [label="Testing processes"];
        }

        cs_algorithms -> {
            cs_algorithms_analysis   [label="Analysis"];
            cs_algorithms_structres  [label="Data Structres"];
            cs_algorithms_algorithms [label="Algorithms"];
        }

        cs_algorithms_analysis -> {
            cs_algorithms_analysis_bigo [label="Big O"];
        }

        cs_algorithms_structres -> {
            cs_algorithms_structres_lists  [label="Lists"];
            cs_algorithms_structres_stacks [label="Stacks"];
            cs_algorithms_structres_queues [label="Queues"];
            cs_algorithms_structres_trees  [label="Trees"];
            cs_algorithms_structres_heaps  [label="Heaps"];
            cs_algorithms_structres_graphs [label="Graphs"];
        }

        cs_algorithms_algorithms -> {
            cs_algorithms_structres_sorting   [label="Sorting algoritms"];
            cs_algorithms_structres_reasearch [label="Reasearch algoritms"];
        }

        cs_architecture -> {
            cs_architecture_microservices [label="Microservices"];
            cs_architecture_ddd           [label="Domain-Driven Design"];
            cs_architecture_solid         [label="SOLID"];
            cs_architecture_patterns      [label="Design Patterns"];
            cs_architecture_event         [label="Event Sourcing"];
            cs_architecture_oop           [label="Object-Oriented Programming"];
            cs_architecture_func          [label="Functional Programming"];
        }

        cs_architecture_oop -> {
            cs_architecture_oop_encapsulation [label="Encapsulation"];
            cs_architecture_oop_inheritance   [label="Inheritance"];
            cs_architecture_oop_polymorphism  [label="Polymorphism"];
        }

        cs_debugging -> {
            cs_debugging_troubleshooting [label="Troubleshooting"];
            cs_debugging_logging         [label="Logging"];
            cs_debugging_monitoring      [label="Monitoring"];
        }
    }

    // Software Development Processes
    subgraph processing {
        processing -> {
            processing_trackers    [label="Bug tracking systems"];
            processing_version     [label="Version Control"];
            processing_estimations [label="Estimations"];
            processing_deployment  [label="Deployment"];
        }
    }

    processing_trackers -> {
        processing_trackers_jira    [label="Jira"]
        processing_trackers_redmine [label="Redmine"]
        processing_trackers_tfs     [label="TFS"]
    }

    processing_version -> {
        processing_version_git [label="Git"]
    }

    processing_deployment -> {
        processing_deployment_ci [label="Continuous Integration"];
        processing_deployment_cd [label="Continuous Delivery"];
    }

    // Operating System
    subgraph os {
        os -> {
            os_virtual_memory [label="Virtual Memory"];
            os_threads        [label="Threads"];
            os_io             [label="I/O"];
        }
    }

    // IT Management
    subgraph management {
        management -> {
            management_agile     [label="Agile"];
            management_scrum     [label="SCRUM"];
            management_kanban    [label="Kanban"];
            management_waterfall [label="Waterfall"];
        }
    }

    // Golang
    subgraph go {
        go -> {
            go_types       [label="Types"];
            go_function    [label="Functions"];
            go_concurrency [label="Concurrency"];
            go_templates   [label="Templates"];
            go_tools       [label="Tools"];
            go_testing     [label="Testing"];
            go_realtime    [label="Real-time"];
            go_app         [label="Web Application"];
            cs_architecture_oop;
        };

        go_types -> {
            go_types_text        [label="Text"];
            go_types_numbers     [label="Numbers"];
            go_types_collections [label="Collections"];
            go_types_pointer     [label="Pointer"];
            go_types_constant    [label="Constants"];
            go_types_interface   [label="Interface"];
            go_types_error       [label="Error"];
        };

        go_types_text -> {
            go_types_text_strings [label="Strings"];
            go_types_text_runes   [label="Runes"];
            go_types_text_bytes   [label="Bytes"];
        };

        go_types_numbers -> {
            go_types_numbers_int   [label="Integers"];
            go_types_numbers_uint  [label="Unsigned Integers"];
            go_types_numbers_float [label="Floating-point Numbers"];
        };

        go_types_collections -> {
            go_types_collections_array [label="Array"];
            go_types_collections_slice [label="Slice"];
            go_types_collections_map   [label="Map"];
        };

        go_function -> {
            go_function_closure   [label="Closure"];
            go_function_recursion [label="Recursion"];
            go_function_panic     [label="Panic"];
            go_function_recover   [label="Recover"];
            go_function_defer     [label="Defer"];
        }

        go_concurrency -> {
            go_concurrency_goroutine [label="Goroutines"];
            go_concurrency_channels  [label="Channels"];
            go_concurrency_select    [label="Select"];
            go_concurrency_race      [label="Race Condition"];
            go_concurrency_mutex     [label="Mutex"];
            os_threads;
        }

        go_tools -> {
            go_tool_fmt   [label="fmt"];
            go_tool_vet   [label="vet"];
            go_tool_test  [label="test"];
            go_tool_pprof [label="pprof"];
        }

        go_realtime -> {
            go_realtime_gc        [label="Garbage Collector"];
            go_realtime_scheduler [label="Scheduler"];
        }

        go_app -> {
            go_app_context [label="Context"];
        }
    }

    // Databases
    subgraph db {
        db -> {
            db_sql          [label="SQL"];
            db_indexes      [label="Indexes"];
            db_transactions [label="Transactions"];
            db_nosql        [label="NOSQL"];
        }

        db_nosql -> {
            db_nosql_elasticseaerch [label="Elasticseaerch"];
            db_nosql_redis          [label="Redis"];
            db_nosql_mongo          [label="MongoDB"];
            db_nosql_clickhouse     [label="ClickHouse"];
        }
    }

    // Computer network
    subgraph networks {
        networks -> {
            networks_osi       [label="OSI"];
            networks_grpc      [label="gRPC"];
            networks_restapi   [label="REST API"];
            networks_graphql   [label="GraphQL"];
            networks_soap      [label="SOAP"];
            networks_protocols [label="Protocols"];
            networks_websocket [label="Websocket"];
            networks_auth      [label="Authorization and Authentication"];
        }

        networks_protocols -> {
            networks_protocols_IP   [label="IP"];
            networks_protocols_TCP  [label="TCP"];
            networks_protocols_UDP  [label="UDP"];
            networks_protocols_HTTP [label="HTTP"];
            networks_protocols_TLS  [label="TLS"];
            networks_protocols_SSL  [label="SSL"];
        }

        networks_auth -> {
            networks_auth_authorization  [label="Authorization"];
            networks_auth_authentication [label="Authentication"];
            networks_auth_oauth          [label="OAuth"];
            networks_auth_jwt            [label="JWT"];
        }
    }
}